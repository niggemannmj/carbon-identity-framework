IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_BASE_TABLE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_BASE_TABLE (
  PRODUCT_NAME VARCHAR(20) NOT NULL,
  PRIMARY KEY (PRODUCT_NAME)
)")
;

IF NOT EXISTS(SELECT 1 FROM IDN_BASE_TABLE WHERE PRODUCT_NAME = 'WSO2 Identity Server')
	INSERT INTO IDN_BASE_TABLE values ('WSO2 Identity Server')
;

-- ASE cannot support table sizes larger than the default page size for a server.
IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH_CONSUMER_APPS') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH_CONSUMER_APPS (
  ID INTEGER IDENTITY,
  CONSUMER_KEY VARCHAR(255),
  CONSUMER_SECRET VARCHAR(2048),
  USERNAME VARCHAR(255),
  TENANT_ID INTEGER DEFAULT 0,
  USER_DOMAIN VARCHAR(50),
  APP_NAME VARCHAR(255),
  OAUTH_VERSION VARCHAR(128),
  CALLBACK_URL VARCHAR(1024),
  GRANT_TYPES VARCHAR(1024),
  PKCE_MANDATORY CHAR(1) DEFAULT '0',
  PKCE_SUPPORT_PLAIN CHAR(1) DEFAULT '0',
  APP_STATE VARCHAR (25) DEFAULT 'ACTIVE',
  USER_ACCESS_TOKEN_EXPIRE_TIME BIGINT DEFAULT 3600,
  APP_ACCESS_TOKEN_EXPIRE_TIME BIGINT DEFAULT 3600,
  REFRESH_TOKEN_EXPIRE_TIME BIGINT DEFAULT 84600,
  ID_TOKEN_EXPIRE_TIME BIGINT DEFAULT 3600,
  CONSTRAINT CONSUMER_KEY_CONSTRAINT UNIQUE (CONSUMER_KEY),
  PRIMARY KEY (ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_SCOPE_VALIDATORS') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_SCOPE_VALIDATORS (
	APP_ID INTEGER NOT NULL,
	SCOPE_VALIDATOR VARCHAR (128) NOT NULL,
	--FOREIGN KEY (APP_ID) REFERENCES IDN_OAUTH_CONSUMER_APPS(ID) ON DELETE CASCADE
	PRIMARY KEY (APP_ID,SCOPE_VALIDATOR)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH1A_REQUEST_TOKEN') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH1A_REQUEST_TOKEN (
  REQUEST_TOKEN VARCHAR(512) NOT NULL,
  REQUEST_TOKEN_SECRET VARCHAR(512),
  CONSUMER_KEY_ID INTEGER,
  CALLBACK_URL VARCHAR(1024),
  SCOPE VARCHAR(2048),
  AUTHORIZED VARCHAR(128),
  OAUTH_VERIFIER VARCHAR(512),
  AUTHZ_USER VARCHAR(512),
  TENANT_ID INTEGER DEFAULT -1,
  --FOREIGN KEY (CONSUMER_KEY_ID) REFERENCES IDN_OAUTH_CONSUMER_APPS(ID) ON DELETE CASCADE
  PRIMARY KEY (REQUEST_TOKEN)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH1A_ACCESS_TOKEN') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH1A_ACCESS_TOKEN (
  ACCESS_TOKEN VARCHAR(512) NOT NULL,
  ACCESS_TOKEN_SECRET VARCHAR(512),
  CONSUMER_KEY_ID INTEGER,
  SCOPE VARCHAR(2048),
  AUTHZ_USER VARCHAR(512),
  TENANT_ID INTEGER DEFAULT -1,
  --FOREIGN KEY (CONSUMER_KEY_ID) REFERENCES IDN_OAUTH_CONSUMER_APPS(ID) ON DELETE CASCADE
  PRIMARY KEY (ACCESS_TOKEN)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_ACCESS_TOKEN') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_ACCESS_TOKEN (
  TOKEN_ID VARCHAR (255) NOT NULL,
  ACCESS_TOKEN VARCHAR(2048),
  REFRESH_TOKEN VARCHAR(2048),
  CONSUMER_KEY_ID INTEGER,
  AUTHZ_USER VARCHAR (100),
  TENANT_ID INTEGER,
  USER_DOMAIN VARCHAR(50),
  USER_TYPE VARCHAR (25),
  GRANT_TYPE VARCHAR (50),
  TIME_CREATED DATETIME,
  REFRESH_TOKEN_TIME_CREATED DATETIME,
  VALIDITY_PERIOD BIGINT,
  REFRESH_TOKEN_VALIDITY_PERIOD BIGINT,
  TOKEN_SCOPE_HASH VARCHAR(32),
  TOKEN_STATE VARCHAR(25) DEFAULT 'ACTIVE',
  TOKEN_STATE_ID VARCHAR (128) DEFAULT 'NONE',
  SUBJECT_IDENTIFIER VARCHAR(255),
  ACCESS_TOKEN_HASH VARCHAR(512),
  REFRESH_TOKEN_HASH VARCHAR(512),
  PRIMARY KEY (TOKEN_ID),
  --FOREIGN KEY (CONSUMER_KEY_ID) REFERENCES IDN_OAUTH_CONSUMER_APPS(ID) ON DELETE CASCADE
  CONSTRAINT CON_APP_KEY UNIQUE (CONSUMER_KEY_ID,AUTHZ_USER,TENANT_ID,USER_DOMAIN,USER_TYPE,TOKEN_SCOPE_HASH,
                                 TOKEN_STATE,TOKEN_STATE_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_ACCESS_TOKEN_AUDIT') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_ACCESS_TOKEN_AUDIT (
	TOKEN_ID VARCHAR (255),
	ACCESS_TOKEN VARCHAR(2048),
	REFRESH_TOKEN VARCHAR(2048),
	CONSUMER_KEY_ID INTEGER,
	AUTHZ_USER VARCHAR (100),
	TENANT_ID INTEGER,
	USER_DOMAIN VARCHAR(50),
	USER_TYPE VARCHAR (25),
	GRANT_TYPE VARCHAR (50),
	TIME_CREATED DATETIME,
	REFRESH_TOKEN_TIME_CREATED DATETIME,
	VALIDITY_PERIOD BIGINT,
	REFRESH_TOKEN_VALIDITY_PERIOD BIGINT,
	TOKEN_SCOPE_HASH VARCHAR(32),
	TOKEN_STATE VARCHAR(25),
	TOKEN_STATE_ID VARCHAR (128) ,
	SUBJECT_IDENTIFIER VARCHAR(255),
	ACCESS_TOKEN_HASH VARCHAR(512),
	REFRESH_TOKEN_HASH VARCHAR(512),
	INVALIDATED_TIME DATETIME
)")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_AT_CK_AU')
	CREATE INDEX IDX_AT_CK_AU ON IDN_OAUTH2_ACCESS_TOKEN(CONSUMER_KEY_ID, AUTHZ_USER, TOKEN_STATE, USER_TYPE)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_TC')
	CREATE INDEX IDX_TC ON IDN_OAUTH2_ACCESS_TOKEN(TIME_CREATED)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_ATH')
	CREATE INDEX IDX_ATH ON IDN_OAUTH2_ACCESS_TOKEN(ACCESS_TOKEN_HASH)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_AT_TI_UD')
	CREATE INDEX IDX_AT_TI_UD ON IDN_OAUTH2_ACCESS_TOKEN(AUTHZ_USER, TENANT_ID, TOKEN_STATE, USER_DOMAIN)
;


--IF EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_AT_CK_AU')
--DROP INDEX IDN_OAUTH2_ACCESS_TOKEN.IDX_AT_CK_AU
--;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_AUTHORIZATION_CODE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_AUTHORIZATION_CODE (
  CODE_ID VARCHAR (255) NOT NULL,
  AUTHORIZATION_CODE VARCHAR(2048),
  CONSUMER_KEY_ID INTEGER,
  CALLBACK_URL VARCHAR(1024),
  SCOPE VARCHAR(2048),
  AUTHZ_USER VARCHAR (100),
  TENANT_ID INTEGER,
  USER_DOMAIN VARCHAR(50),
  TIME_CREATED DATETIME,
  VALIDITY_PERIOD BIGINT,
  STATE VARCHAR (25) DEFAULT 'ACTIVE',
  TOKEN_ID VARCHAR(255),
  SUBJECT_IDENTIFIER VARCHAR(255),
  PKCE_CODE_CHALLENGE VARCHAR (255),
  PKCE_CODE_CHALLENGE_METHOD VARCHAR(128),
  AUTHORIZATION_CODE_HASH VARCHAR(512),
  --FOREIGN KEY (CONSUMER_KEY_ID) REFERENCES IDN_OAUTH_CONSUMER_APPS(ID) ON DELETE CASCADE
  PRIMARY KEY (CODE_ID)
)")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_AUTHORIZATION_CODE_HASH')
	CREATE INDEX IDX_AUTHORIZATION_CODE_HASH ON IDN_OAUTH2_AUTHORIZATION_CODE (AUTHORIZATION_CODE_HASH,CONSUMER_KEY_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_AUTHORIZATION_CODE_AU_TI')
	CREATE INDEX IDX_AUTHORIZATION_CODE_AU_TI ON IDN_OAUTH2_AUTHORIZATION_CODE (AUTHZ_USER,TENANT_ID, USER_DOMAIN, STATE)
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_ACCESS_TOKEN_SCOPE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_ACCESS_TOKEN_SCOPE (
  TOKEN_ID VARCHAR (255) NOT NULL,
  TOKEN_SCOPE VARCHAR (60) NOT NULL,
  TENANT_ID INTEGER DEFAULT -1,
  --FOREIGN KEY (TOKEN_ID) REFERENCES IDN_OAUTH2_ACCESS_TOKEN(TOKEN_ID) ON DELETE CASCADE
  PRIMARY KEY (TOKEN_ID, TOKEN_SCOPE)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_SCOPE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_SCOPE (
  SCOPE_ID INTEGER IDENTITY NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  DISPLAY_NAME VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(512),
  TENANT_ID INTEGER DEFAULT -1 NOT NULL,
  PRIMARY KEY (SCOPE_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_SCOPE_BINDING') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_SCOPE_BINDING (
  SCOPE_ID INTEGER NOT NULL,
  SCOPE_BINDING VARCHAR(255)
  --FOREIGN KEY (SCOPE_ID) REFERENCES IDN_OAUTH2_SCOPE(SCOPE_ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OAUTH2_RESOURCE_SCOPE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OAUTH2_RESOURCE_SCOPE (
  RESOURCE_PATH VARCHAR(255) NOT NULL,
  SCOPE_ID INTEGER NOT NULL,
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (RESOURCE_PATH)
  --FOREIGN KEY (SCOPE_ID) REFERENCES IDN_OAUTH2_SCOPE (SCOPE_ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_SCIM_GROUP') AND type = 'U')
EXECUTE("CREATE TABLE IDN_SCIM_GROUP (
  ID INTEGER IDENTITY,
  TENANT_ID INTEGER NOT NULL,
  ROLE_NAME VARCHAR(255) NOT NULL,
  ATTR_NAME VARCHAR(1024) NOT NULL,
  ATTR_VALUE VARCHAR(1024),
  PRIMARY KEY (ID)
)")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_IDN_SCIM_GROUP_TI_RN')
	CREATE INDEX IDX_IDN_SCIM_GROUP_TI_RN ON IDN_SCIM_GROUP (TENANT_ID, ROLE_NAME)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_IDN_SCIM_GROUP_TI_RN_AN')
	CREATE INDEX IDX_IDN_SCIM_GROUP_TI_RN_AN ON IDN_SCIM_GROUP (TENANT_ID, ROLE_NAME, ATTR_NAME)
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OPENID_REMEMBER_ME') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OPENID_REMEMBER_ME (
  USER_NAME VARCHAR(255) NOT NULL,
  TENANT_ID INTEGER DEFAULT 0 NOT NULL,
  COOKIE_VALUE VARCHAR(1024),
  CREATED_TIME DATETIME,
  PRIMARY KEY (USER_NAME, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OPENID_USER_RPS') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OPENID_USER_RPS (
  USER_NAME VARCHAR(255) NOT NULL,
  TENANT_ID INTEGER DEFAULT 0 NOT NULL,
  RP_URL VARCHAR(255) NOT NULL,
  TRUSTED_ALWAYS VARCHAR(128) DEFAULT 'FALSE',
  LAST_VISIT DATE NOT NULL,
  VISIT_COUNT INTEGER DEFAULT 0,
  DEFAULT_PROFILE_NAME VARCHAR(255) DEFAULT 'DEFAULT',
  PRIMARY KEY (USER_NAME, TENANT_ID, RP_URL)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OPENID_ASSOCIATIONS') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OPENID_ASSOCIATIONS (
  HANDLE VARCHAR(255) NOT NULL,
  ASSOC_TYPE VARCHAR(255) NOT NULL,
  EXPIRE_IN DATETIME NOT NULL,
  MAC_KEY VARCHAR(255) NOT NULL,
  ASSOC_STORE VARCHAR(128) DEFAULT 'SHARED',
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (HANDLE)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_STS_STORE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_STS_STORE (
  ID INTEGER IDENTITY,
  TOKEN_ID VARCHAR(255) NOT NULL,
  TOKEN_CONTENT IMAGE NOT NULL, -- WAS: VARBINARY(MAX) NOT NULL,
  CREATE_DATE DATETIME NOT NULL,
  EXPIRE_DATE DATETIME NOT NULL,
  STATE INTEGER DEFAULT 0,
  PRIMARY KEY (ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_IDENTITY_USER_DATA') AND type = 'U')
EXECUTE("CREATE TABLE IDN_IDENTITY_USER_DATA (
  TENANT_ID INTEGER DEFAULT -1234 NOT NULL,
  USER_NAME VARCHAR(255) NOT NULL,
  DATA_KEY VARCHAR(255) NOT NULL,
  DATA_VALUE VARCHAR(2048),
  PRIMARY KEY (TENANT_ID, USER_NAME, DATA_KEY)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_IDENTITY_META_DATA') AND type = 'U')
EXECUTE("CREATE TABLE IDN_IDENTITY_META_DATA (
  USER_NAME VARCHAR(255) NOT NULL, 
  TENANT_ID INTEGER DEFAULT -1234 NOT NULL,
  METADATA_TYPE VARCHAR(255) NOT NULL, 
  METADATA VARCHAR(255) NOT NULL, 
  VALID VARCHAR(255) NOT NULL,
  PRIMARY KEY (TENANT_ID, USER_NAME, METADATA_TYPE, METADATA)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_THRIFT_SESSION') AND type = 'U')
EXECUTE("CREATE TABLE IDN_THRIFT_SESSION (
  SESSION_ID VARCHAR(255) NOT NULL,
  USER_NAME VARCHAR(255) NOT NULL,
  CREATED_TIME VARCHAR(255) NOT NULL,
  LAST_MODIFIED_TIME VARCHAR(255) NOT NULL,
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (SESSION_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_AUTH_SESSION_STORE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_AUTH_SESSION_STORE (
  SESSION_ID VARCHAR (100) NOT NULL,
  SESSION_TYPE VARCHAR(100) NOT NULL,
  OPERATION VARCHAR(10) NOT NULL,
  SESSION_OBJECT IMAGE, -- WAS: VARBINARY(MAX),
  TIME_CREATED BIGINT NOT NULL,
  TENANT_ID INTEGER DEFAULT -1,
  EXPIRY_TIME BIGINT,
  PRIMARY KEY (SESSION_ID, SESSION_TYPE, TIME_CREATED, OPERATION)
)")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_IDN_AUTH_SESSION_TIME')
	CREATE INDEX IDX_IDN_AUTH_SESSION_TIME ON IDN_AUTH_SESSION_STORE (TIME_CREATED)
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_AUTH_TEMP_SESSION_STORE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_AUTH_TEMP_SESSION_STORE (
  SESSION_ID VARCHAR (100) NOT NULL,
  SESSION_TYPE VARCHAR(100) NOT NULL,
  OPERATION VARCHAR(10) NOT NULL,
  SESSION_OBJECT IMAGE, -- WAS: VARBINARY(MAX),
  TIME_CREATED BIGINT NOT NULL,
  TENANT_ID INTEGER DEFAULT -1,
  EXPIRY_TIME BIGINT,
  PRIMARY KEY (SESSION_ID, SESSION_TYPE, TIME_CREATED, OPERATION)
)")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_IDN_AUTH_TMP_SESSION_TIME')
	CREATE INDEX IDX_IDN_AUTH_TMP_SESSION_TIME ON IDN_AUTH_TEMP_SESSION_STORE (TIME_CREATED)
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_APP') AND type = 'U')
EXECUTE("CREATE TABLE SP_APP (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  APP_NAME VARCHAR (255) NOT NULL ,
  USER_STORE VARCHAR (255) NOT NULL,
  USERNAME VARCHAR (255) NOT NULL ,
  DESCRIPTION VARCHAR (1024),
  ROLE_CLAIM VARCHAR (512),
  AUTH_TYPE VARCHAR (255) NOT NULL,
  PROVISIONING_USERSTORE_DOMAIN VARCHAR (512),
  IS_LOCAL_CLAIM_DIALECT CHAR(1) DEFAULT '1',
  IS_SEND_LOCAL_SUBJECT_ID CHAR(1) DEFAULT '0',
  IS_SEND_AUTH_LIST_OF_IDPS CHAR(1) DEFAULT '0',
  IS_USE_TENANT_DOMAIN_SUBJECT CHAR(1) DEFAULT '1',
  IS_USE_USER_DOMAIN_SUBJECT CHAR(1) DEFAULT '1',
  ENABLE_AUTHORIZATION CHAR(1) DEFAULT '0',
  SUBJECT_CLAIM_URI VARCHAR (512),
  IS_SAAS_APP CHAR(1) DEFAULT '0',
  IS_DUMB_MODE CHAR(1) DEFAULT '0',
  PRIMARY KEY (ID),
  CONSTRAINT APPLICATION_NAME_CONSTRAINT UNIQUE(APP_NAME, TENANT_ID)
)")
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_METADATA') AND type = 'U')
EXECUTE("CREATE TABLE SP_METADATA (
  ID INTEGER IDENTITY,
  SP_ID INTEGER,
  NAME VARCHAR(255) NOT NULL,
  VALUE VARCHAR(255) NOT NULL,
  DISPLAY_NAME VARCHAR(255),
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (ID),
  CONSTRAINT SP_METADATA_CONSTRAINT UNIQUE (SP_ID, NAME),
  --FOREIGN KEY (SP_ID) REFERENCES SP_APP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_INBOUND_AUTH') AND type = 'U')
EXECUTE("CREATE TABLE SP_INBOUND_AUTH (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  INBOUND_AUTH_KEY VARCHAR (255),
  INBOUND_AUTH_TYPE VARCHAR (255) NOT NULL,
  INBOUND_CONFIG_TYPE VARCHAR (255) NOT NULL,
  PROP_NAME VARCHAR (255),
  PROP_VALUE VARCHAR (1024) ,
  APP_ID INTEGER NOT NULL,
  PRIMARY KEY (ID)
  --CONSTRAINT APPLICATION_ID_CONSTRAINT FOREIGN KEY (APP_ID) REFERENCES SP_APP (ID) ON DELETE CASCADE
)")
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_AUTH_STEP') AND type = 'U')
EXECUTE("CREATE TABLE SP_AUTH_STEP (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  STEP_ORDER INTEGER DEFAULT 1,
  APP_ID INTEGER NOT NULL,
  IS_SUBJECT_STEP CHAR(1) DEFAULT '0',
  IS_ATTRIBUTE_STEP CHAR(1) DEFAULT '0',
  PRIMARY KEY (ID)
  --CONSTRAINT APPLICATION_ID_CONSTRAINT_STEP FOREIGN KEY (APP_ID) REFERENCES SP_APP (ID) ON DELETE CASCADE
)")
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_FEDERATED_IDP') AND type = 'U')
EXECUTE("CREATE TABLE SP_FEDERATED_IDP (
  ID INTEGER NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  AUTHENTICATOR_ID INTEGER NOT NULL,
  PRIMARY KEY (ID, AUTHENTICATOR_ID)
  --CONSTRAINT STEP_ID_CONSTRAINT FOREIGN KEY (ID) REFERENCES SP_AUTH_STEP (ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_CLAIM_DIALECT') AND type = 'U')
EXECUTE("CREATE TABLE SP_CLAIM_DIALECT (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  SP_DIALECT VARCHAR (512) NOT NULL,
  APP_ID INTEGER NOT NULL,
  PRIMARY KEY (ID)
  --CONSTRAINT DIALECTID_APPID_CONSTRAINT FOREIGN KEY (APP_ID) REFERENCES SP_APP (ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_CLAIM_MAPPING') AND type = 'U')
EXECUTE("CREATE TABLE SP_CLAIM_MAPPING (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  IDP_CLAIM VARCHAR (512) NOT NULL ,
  SP_CLAIM VARCHAR (512) NOT NULL ,
  APP_ID INTEGER NOT NULL,
  IS_REQUESTED VARCHAR(128) DEFAULT '0',
  IS_MANDATORY VARCHAR(128) DEFAULT '0',
  DEFAULT_VALUE VARCHAR(255),
  PRIMARY KEY (ID)
  --CONSTRAINT CLAIMID_APPID_CONSTRAINT FOREIGN KEY (APP_ID) REFERENCES SP_APP (ID) ON DELETE CASCADE
)")
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_ROLE_MAPPING') AND type = 'U')
EXECUTE("CREATE TABLE SP_ROLE_MAPPING (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  IDP_ROLE VARCHAR (255) NOT NULL ,
  SP_ROLE VARCHAR (255) NOT NULL ,
  APP_ID INTEGER NOT NULL,
  PRIMARY KEY (ID)
  --CONSTRAINT ROLEID_APPID_CONSTRAINT FOREIGN KEY (APP_ID) REFERENCES SP_APP (ID) ON DELETE CASCADE
)")
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_REQ_PATH_AUTHENTICATOR') AND type = 'U')
EXECUTE("CREATE TABLE SP_REQ_PATH_AUTHENTICATOR (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  AUTHENTICATOR_NAME VARCHAR (255) NOT NULL ,
  APP_ID INTEGER NOT NULL,
  PRIMARY KEY (ID)
  --CONSTRAINT REQ_AUTH_APPID_CONSTRAINT FOREIGN KEY (APP_ID) REFERENCES SP_APP (ID) ON DELETE CASCADE
)")
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('SP_PROVISIONING_CONNECTOR') AND type = 'U')
EXECUTE("CREATE TABLE SP_PROVISIONING_CONNECTOR (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  IDP_NAME VARCHAR (255) NOT NULL ,
  CONNECTOR_NAME VARCHAR (255) NOT NULL ,
  APP_ID INTEGER NOT NULL,
  IS_JIT_ENABLED CHAR(1) DEFAULT '0' NOT NULL,
  BLOCKING CHAR(1) DEFAULT '0' NOT NULL,
  RULE_ENABLED CHAR(1) DEFAULT '0' NOT NULL,
  PRIMARY KEY (ID)
  --CONSTRAINT PRO_CONNECTOR_APPID_CONSTRAINT FOREIGN KEY (APP_ID) REFERENCES SP_APP (ID) ON DELETE CASCADE
)")
;

IF NOT EXISTS(SELECT * FROM sysobjects WHERE id = object_id('SP_AUTH_SCRIPT') AND type = 'U')
EXECUTE("CREATE TABLE SP_AUTH_SCRIPT (
  ID         INTEGER IDENTITY NOT NULL,
  TENANT_ID  INTEGER          NOT NULL,
  APP_ID     INTEGER          NOT NULL,
  TYPE       VARCHAR(255)     NOT NULL,
  CONTENT    IMAGE DEFAULT NULL, -- WAS: VARBINARY(MAX)    DEFAULT NULL,
  IS_ENABLED CHAR(1) DEFAULT '0' NOT NULL,
  PRIMARY KEY (ID)
)")
;

IF NOT EXISTS(SELECT * FROM sysobjects WHERE id = object_id('SP_TEMPLATE') AND type = 'U')
EXECUTE("CREATE TABLE SP_TEMPLATE (
  ID          INTEGER IDENTITY NOT NULL,
  TENANT_ID  INTEGER  NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(1023),
  CONTENT IMAGE DEFAULT NULL, -- WAS: VARBINARY(MAX) DEFAULT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT SP_TEMPLATE_CONSTRAINT UNIQUE (TENANT_ID, NAME)
)")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_SP_TEMPLATE')
	CREATE INDEX IDX_SP_TEMPLATE ON SP_TEMPLATE (TENANT_ID, NAME)
;

IF NOT EXISTS(SELECT * FROM sysobjects WHERE id = object_id('SP_DEFAULT_AUTH_SEQ') AND type = 'U')
EXECUTE("CREATE TABLE SP_DEFAULT_AUTH_SEQ (
  ID INTEGER IDENTITY NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  DESCRIPTION VARCHAR(1024),
  SEQ_CONTENT IMAGE DEFAULT NULL, -- WAS: VARBINARY(MAX) DEFAULT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT SP_DEFAULT_AUTH_SEQ_CONSTRAINT UNIQUE (TENANT_ID, NAME)
)")
;

IF NOT EXISTS(SELECT * FROM sysobjects WHERE id = object_id('IDN_AUTH_WAIT_STATUS') AND type = 'U')
EXECUTE("CREATE TABLE IDN_AUTH_WAIT_STATUS (
  ID              INTEGER IDENTITY       NOT NULL,
  TENANT_ID       INTEGER                NOT NULL,
  LONG_WAIT_KEY   VARCHAR(255)           NOT NULL,
  WAIT_STATUS     CHAR(1) DEFAULT '1' NOT NULL,
  TIME_CREATED    DATETIME,
  EXPIRE_TIME     DATETIME,
  PRIMARY KEY (ID),
  CONSTRAINT IDN_AUTH_WAIT_STATUS_KEY UNIQUE (LONG_WAIT_KEY)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP') AND type = 'U')
EXECUTE("CREATE TABLE IDP (
  ID INTEGER IDENTITY,
  TENANT_ID INTEGER NOT NULL,
  NAME VARCHAR(254) NOT NULL,
  IS_ENABLED CHAR(1) DEFAULT '1' NOT NULL,
  IS_PRIMARY CHAR(1) DEFAULT '0' NOT NULL,
  HOME_REALM_ID VARCHAR(254),
  IMAGE IMAGE, -- WAS: VARBINARY(MAX),
  CERTIFICATE IMAGE, -- WAS: VARBINARY(MAX),
  ALIAS VARCHAR(254),
  INBOUND_PROV_ENABLED CHAR (1) DEFAULT '0' NOT NULL,
  INBOUND_PROV_USER_STORE_ID VARCHAR(254),
  USER_CLAIM_URI VARCHAR(254),
  ROLE_CLAIM_URI VARCHAR(254),
  DESCRIPTION VARCHAR (1024),
  DEFAULT_AUTHENTICATOR_NAME VARCHAR(254),
  DEFAULT_PRO_CONNECTOR_NAME VARCHAR(254),
  PROVISIONING_ROLE VARCHAR(128),
  IS_FEDERATION_HUB CHAR(1) DEFAULT '0' NOT NULL,
  IS_LOCAL_CLAIM_DIALECT CHAR(1) DEFAULT '0' NOT NULL,
  PRIMARY KEY (ID),
  DISPLAY_NAME VARCHAR(255),
  UNIQUE (TENANT_ID, NAME)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_ROLE') AND type = 'U')
EXECUTE("CREATE TABLE IDP_ROLE (
  ID INTEGER IDENTITY,
  IDP_ID INTEGER,
  TENANT_ID INTEGER,
  [ROLE] VARCHAR(254), -- WAS: ROLE is a reserved word in ASE, so you need to put it in brackets...
  PRIMARY KEY (ID),
  UNIQUE (IDP_ID, [ROLE])
  --FOREIGN KEY (IDP_ID) REFERENCES IDP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_ROLE_MAPPING') AND type = 'U')
EXECUTE("CREATE TABLE IDP_ROLE_MAPPING (
  ID INTEGER IDENTITY,
  IDP_ROLE_ID INTEGER,
  TENANT_ID INTEGER,
  USER_STORE_ID VARCHAR (253),
  LOCAL_ROLE VARCHAR(253),
  PRIMARY KEY (ID),
  UNIQUE (IDP_ROLE_ID, TENANT_ID, USER_STORE_ID, LOCAL_ROLE)
  --FOREIGN KEY (IDP_ROLE_ID) REFERENCES IDP_ROLE(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_CLAIM') AND type = 'U')
EXECUTE("CREATE TABLE IDP_CLAIM (
  ID INTEGER IDENTITY NOT NULL,
  IDP_ID INTEGER,
  TENANT_ID INTEGER,
  CLAIM VARCHAR(254),
  PRIMARY KEY (ID),
  UNIQUE (IDP_ID, CLAIM)
  --FOREIGN KEY (IDP_ID) REFERENCES IDP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_CLAIM_MAPPING') AND type = 'U')
EXECUTE("CREATE TABLE IDP_CLAIM_MAPPING (
  ID INTEGER IDENTITY NOT NULL,
  IDP_CLAIM_ID INTEGER,
  TENANT_ID INTEGER,
  LOCAL_CLAIM VARCHAR(253),
  DEFAULT_VALUE VARCHAR(255),
    IS_REQUESTED VARCHAR(128) DEFAULT '0',
  PRIMARY KEY (ID),
  UNIQUE (IDP_CLAIM_ID, TENANT_ID, LOCAL_CLAIM)
  --FOREIGN KEY (IDP_CLAIM_ID) REFERENCES IDP_CLAIM(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_AUTHENTICATOR') AND type = 'U')
EXECUTE("CREATE TABLE IDP_AUTHENTICATOR (
  ID INTEGER IDENTITY,
  TENANT_ID INTEGER,
  IDP_ID INTEGER,
  NAME VARCHAR(255) NOT NULL,
  IS_ENABLED CHAR (1) DEFAULT '1',
  DISPLAY_NAME VARCHAR(255),
  PRIMARY KEY (ID),
  UNIQUE (TENANT_ID, IDP_ID, NAME)
  --FOREIGN KEY (IDP_ID) REFERENCES IDP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_METADATA') AND type = 'U')
EXECUTE("CREATE TABLE IDP_METADATA (
  ID INTEGER IDENTITY,
  IDP_ID INTEGER,
  NAME VARCHAR(255) NOT NULL,
  VALUE VARCHAR(255) NOT NULL,
  DISPLAY_NAME VARCHAR(255),
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (ID),
  CONSTRAINT IDP_METADATA_CONSTRAINT UNIQUE (IDP_ID, NAME)
  --FOREIGN KEY (IDP_ID) REFERENCES IDP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_AUTHENTICATOR_PROPERTY') AND type = 'U')
EXECUTE("CREATE TABLE IDP_AUTHENTICATOR_PROPERTY (
  ID INTEGER IDENTITY,
  TENANT_ID INTEGER,
  AUTHENTICATOR_ID INTEGER,
  PROPERTY_KEY VARCHAR(255) NOT NULL,
  PROPERTY_VALUE VARCHAR(2047),
  IS_SECRET CHAR (1) DEFAULT '0',
  PRIMARY KEY (ID),
  UNIQUE (TENANT_ID, AUTHENTICATOR_ID, PROPERTY_KEY)
  --FOREIGN KEY (AUTHENTICATOR_ID) REFERENCES IDP_AUTHENTICATOR(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_PROVISIONING_CONFIG') AND type = 'U')
EXECUTE("CREATE TABLE IDP_PROVISIONING_CONFIG (
  ID INTEGER IDENTITY,
  TENANT_ID INTEGER,
  IDP_ID INTEGER,
  PROVISIONING_CONNECTOR_TYPE VARCHAR(255) NOT NULL,
  IS_ENABLED CHAR (1) DEFAULT '0',
  IS_BLOCKING CHAR (1) DEFAULT '0',
  IS_RULES_ENABLED CHAR (1) DEFAULT '0',
  PRIMARY KEY (ID),
  UNIQUE (TENANT_ID, IDP_ID, PROVISIONING_CONNECTOR_TYPE)
  --FOREIGN KEY (IDP_ID) REFERENCES IDP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_PROV_CONFIG_PROPERTY') AND type = 'U')
EXECUTE("CREATE TABLE IDP_PROV_CONFIG_PROPERTY (
  ID INTEGER IDENTITY,
  TENANT_ID INTEGER,
  PROVISIONING_CONFIG_ID INTEGER,
  PROPERTY_KEY VARCHAR(255) NOT NULL,
  PROPERTY_VALUE VARCHAR(2048),
  PROPERTY_BLOB_VALUE IMAGE, -- WAS: VARBINARY(MAX),
  PROPERTY_TYPE CHAR(32) NOT NULL,
  IS_SECRET CHAR (1) DEFAULT '0',
  PRIMARY KEY (ID),
  UNIQUE (TENANT_ID, PROVISIONING_CONFIG_ID, PROPERTY_KEY)
  --FOREIGN KEY (PROVISIONING_CONFIG_ID) REFERENCES IDP_PROVISIONING_CONFIG(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_PROVISIONING_ENTITY') AND type = 'U')
EXECUTE("CREATE TABLE IDP_PROVISIONING_ENTITY (
  ID INTEGER IDENTITY,
  PROVISIONING_CONFIG_ID INTEGER,
  ENTITY_TYPE VARCHAR(255) NOT NULL,
  ENTITY_LOCAL_USERSTORE VARCHAR(255) NOT NULL,
  ENTITY_NAME VARCHAR(255) NOT NULL,
  ENTITY_VALUE VARCHAR(255),
  TENANT_ID INTEGER,
  ENTITY_LOCAL_ID VARCHAR(255),
  PRIMARY KEY (ID),
  UNIQUE (ENTITY_TYPE, TENANT_ID, ENTITY_LOCAL_USERSTORE, PROVISIONING_CONFIG_ID), 
  UNIQUE (ENTITY_TYPE, TENANT_ID, ENTITY_NAME, PROVISIONING_CONFIG_ID),
  UNIQUE (PROVISIONING_CONFIG_ID, ENTITY_TYPE, ENTITY_VALUE)
  --FOREIGN KEY (PROVISIONING_CONFIG_ID) REFERENCES IDP_PROVISIONING_CONFIG(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDP_LOCAL_CLAIM') AND type = 'U')
EXECUTE("CREATE TABLE IDP_LOCAL_CLAIM (
  ID INTEGER IDENTITY,
  TENANT_ID INTEGER,
  IDP_ID INTEGER,
  CLAIM_URI VARCHAR(255) NOT NULL,
  DEFAULT_VALUE VARCHAR(255),
  IS_REQUESTED VARCHAR(128) DEFAULT '0',
  PRIMARY KEY (ID),
  UNIQUE (TENANT_ID, IDP_ID, CLAIM_URI)
  --FOREIGN KEY (IDP_ID) REFERENCES IDP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_ASSOCIATED_ID') AND type = 'U')
EXECUTE("CREATE TABLE IDN_ASSOCIATED_ID (
  ID INTEGER IDENTITY,
  IDP_USER_ID VARCHAR(255) NOT NULL,
  TENANT_ID INTEGER DEFAULT -1234,
  IDP_ID INTEGER NOT NULL,
  DOMAIN_NAME VARCHAR(255) NOT NULL,
  USER_NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE(IDP_USER_ID, TENANT_ID, IDP_ID)
  --FOREIGN KEY (IDP_ID) REFERENCES IDP(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_USER_ACCOUNT_ASSOCIATION') AND type = 'U')
EXECUTE("CREATE TABLE IDN_USER_ACCOUNT_ASSOCIATION (
  ASSOCIATION_KEY VARCHAR(255) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  DOMAIN_NAME VARCHAR(255) NOT NULL,
  USER_NAME VARCHAR(255) NOT NULL,
  PRIMARY KEY (TENANT_ID, DOMAIN_NAME, USER_NAME)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('FIDO_DEVICE_STORE') AND type = 'U')
EXECUTE("CREATE TABLE FIDO_DEVICE_STORE (
  TENANT_ID INTEGER NOT NULL,
  DOMAIN_NAME VARCHAR(255) NOT NULL,
  USER_NAME VARCHAR(45) NOT NULL,
  TIME_REGISTERED DATETIME,
  KEY_HANDLE VARCHAR(200) NOT NULL,
  DEVICE_DATA VARCHAR(2048) NOT NULL,
  PRIMARY KEY (TENANT_ID, DOMAIN_NAME, USER_NAME, KEY_HANDLE)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('WF_REQUEST') AND type = 'U')
EXECUTE("CREATE TABLE WF_REQUEST (
  UUID VARCHAR (45) NOT NULL,
  CREATED_BY VARCHAR (255),
  TENANT_ID INTEGER DEFAULT -1,
  OPERATION_TYPE VARCHAR (50),
  CREATED_AT DATETIME,
  UPDATED_AT DATETIME,
  STATUS VARCHAR (30),
  REQUEST IMAGE, -- WAS: VARBINARY(MAX),
  PRIMARY KEY (UUID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('WF_BPS_PROFILE') AND type = 'U')
EXECUTE("CREATE TABLE WF_BPS_PROFILE (
  PROFILE_NAME VARCHAR(45) NOT NULL,
  HOST_URL_MANAGER VARCHAR(255),
  HOST_URL_WORKER VARCHAR(255),
  USERNAME VARCHAR(45),
  PASSWORD VARCHAR(1023),
  CALLBACK_HOST VARCHAR (45),
  TENANT_ID INTEGER DEFAULT -1 NOT NULL,
  PRIMARY KEY (PROFILE_NAME, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('WF_WORKFLOW') AND type = 'U')
EXECUTE("CREATE TABLE WF_WORKFLOW(
  ID VARCHAR (45) NOT NULL,
  WF_NAME VARCHAR (45),
  DESCRIPTION VARCHAR (255),
  TEMPLATE_ID VARCHAR (45),
  IMPL_ID VARCHAR (45),
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('WF_WORKFLOW_ASSOCIATION') AND type = 'U')
EXECUTE("CREATE TABLE WF_WORKFLOW_ASSOCIATION(
  ID INTEGER IDENTITY NOT NULL ,
  ASSOC_NAME VARCHAR (45),
  EVENT_ID VARCHAR(45),
  ASSOC_CONDITION VARCHAR (2000),
  WORKFLOW_ID VARCHAR (45),
  IS_ENABLED CHAR (1) DEFAULT '1',
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY(ID)
  --FOREIGN KEY (WORKFLOW_ID) REFERENCES WF_WORKFLOW(ID)ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('WF_WORKFLOW_CONFIG_PARAM') AND type = 'U')
EXECUTE("CREATE TABLE WF_WORKFLOW_CONFIG_PARAM(
  WORKFLOW_ID VARCHAR (45) NOT NULL,
  PARAM_NAME VARCHAR (45) NOT NULL,
  PARAM_VALUE VARCHAR (1000),
  PARAM_QNAME VARCHAR (45) NOT NULL,
  PARAM_HOLDER VARCHAR (45) NOT NULL,
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (WORKFLOW_ID, PARAM_NAME, PARAM_QNAME, PARAM_HOLDER)
  --FOREIGN KEY (WORKFLOW_ID) REFERENCES WF_WORKFLOW(ID)ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('WF_REQUEST_ENTITY_RELATIONSHIP') AND type = 'U')
EXECUTE("CREATE TABLE WF_REQUEST_ENTITY_RELATIONSHIP(
  REQUEST_ID VARCHAR (45) NOT NULL,
  ENTITY_NAME VARCHAR (255) NOT NULL,
  ENTITY_TYPE VARCHAR (50) NOT NULL,
  TENANT_ID INTEGER DEFAULT -1 NOT NULL,
  PRIMARY KEY(REQUEST_ID, ENTITY_NAME, ENTITY_TYPE, TENANT_ID)
  --FOREIGN KEY (REQUEST_ID) REFERENCES WF_REQUEST(UUID)ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('WF_WORKFLOW_REQUEST_RELATION') AND type = 'U')
EXECUTE("CREATE TABLE WF_WORKFLOW_REQUEST_RELATION(
  RELATIONSHIP_ID VARCHAR (45) NOT NULL,
  WORKFLOW_ID VARCHAR (45),
  REQUEST_ID VARCHAR (45),
  UPDATED_AT DATETIME,
  STATUS VARCHAR (30),
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (RELATIONSHIP_ID)
  --FOREIGN KEY (WORKFLOW_ID) REFERENCES WF_WORKFLOW(ID)ON DELETE CASCADE
  --FOREIGN KEY (REQUEST_ID) REFERENCES WF_REQUEST(UUID)ON DELETE CASCADE
)")
;


IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_RECOVERY_DATA') AND type = 'U')
EXECUTE("CREATE TABLE IDN_RECOVERY_DATA (
  USER_NAME VARCHAR(255) NOT NULL,
  USER_DOMAIN VARCHAR(127) NOT NULL,
  TENANT_ID INTEGER DEFAULT -1 NOT NULL,
  CODE VARCHAR(255) NOT NULL,
  SCENARIO VARCHAR(255) NOT NULL,
  STEP VARCHAR(127) NOT NULL,
  TIME_CREATED DATETIME NOT NULL,
  REMAINING_SETS VARCHAR(2500) DEFAULT NULL,
  PRIMARY KEY(USER_NAME, USER_DOMAIN, TENANT_ID, SCENARIO, STEP),
  UNIQUE(CODE)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_PASSWORD_HISTORY_DATA') AND type = 'U')
EXECUTE("CREATE TABLE IDN_PASSWORD_HISTORY_DATA (
  ID INTEGER IDENTITY NOT NULL ,
  USER_NAME   VARCHAR(255) NOT NULL,
  USER_DOMAIN VARCHAR(127) NOT NULL,
  TENANT_ID   INTEGER DEFAULT -1 NOT NULL,
  SALT_VALUE  VARCHAR(255),
  HASH        VARCHAR(255),
  TIME_CREATED DATETIME NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE (USER_NAME,USER_DOMAIN,TENANT_ID,SALT_VALUE,HASH),
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_CLAIM_DIALECT') AND type = 'U')
EXECUTE("CREATE TABLE IDN_CLAIM_DIALECT (
  ID INTEGER IDENTITY NOT NULL,
  DIALECT_URI VARCHAR (255) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT DIALECT_URI_CONSTRAINT UNIQUE (DIALECT_URI, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_CLAIM') AND type = 'U')
EXECUTE("CREATE TABLE IDN_CLAIM (
  ID INTEGER IDENTITY NOT NULL,
  DIALECT_ID INTEGER,
  CLAIM_URI VARCHAR (255) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  --FOREIGN KEY (DIALECT_ID) REFERENCES IDN_CLAIM_DIALECT(ID) ON DELETE CASCADE
  CONSTRAINT CLAIM_URI_CONSTRAINT UNIQUE (DIALECT_ID, CLAIM_URI, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_CLAIM_MAPPED_ATTRIBUTE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_CLAIM_MAPPED_ATTRIBUTE (
  ID INTEGER IDENTITY NOT NULL,
  LOCAL_CLAIM_ID INTEGER,
  USER_STORE_DOMAIN_NAME VARCHAR (255) NOT NULL,
  ATTRIBUTE_NAME VARCHAR (255) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  --FOREIGN KEY (LOCAL_CLAIM_ID) REFERENCES IDN_CLAIM(ID) ON DELETE CASCADE
  CONSTRAINT USER_STORE_DOMAIN_CONSTRAINT UNIQUE (LOCAL_CLAIM_ID, USER_STORE_DOMAIN_NAME, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_CLAIM_PROPERTY') AND type = 'U')
EXECUTE("CREATE TABLE IDN_CLAIM_PROPERTY (
  ID INTEGER IDENTITY NOT NULL,
  LOCAL_CLAIM_ID INTEGER,
  PROPERTY_NAME VARCHAR (255) NOT NULL,
  PROPERTY_VALUE VARCHAR (255) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  --FOREIGN KEY (LOCAL_CLAIM_ID) REFERENCES IDN_CLAIM(ID) ON DELETE CASCADE
  CONSTRAINT PROPERTY_NAME_CONSTRAINT UNIQUE (LOCAL_CLAIM_ID, PROPERTY_NAME, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_CLAIM_MAPPING') AND type = 'U')
EXECUTE("CREATE TABLE IDN_CLAIM_MAPPING (
  ID INTEGER IDENTITY NOT NULL,
  EXT_CLAIM_ID INTEGER NOT NULL,
  MAPPED_LOCAL_CLAIM_ID INTEGER NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  --FOREIGN KEY (EXT_CLAIM_ID) REFERENCES IDN_CLAIM(ID) ON DELETE CASCADE
  FOREIGN KEY (MAPPED_LOCAL_CLAIM_ID) REFERENCES IDN_CLAIM(ID), -- ON DELETE NO ACTION ,
  CONSTRAINT EXT_TO_LOC_MAPPING_CONSTRN UNIQUE (EXT_CLAIM_ID, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_SAML2_ASSERTION_STORE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_SAML2_ASSERTION_STORE (
  ID INTEGER IDENTITY NOT NULL,
  SAML2_ID  VARCHAR(255) ,
  SAML2_ISSUER  VARCHAR(255) ,
  SAML2_SUBJECT  VARCHAR(255) ,
  SAML2_SESSION_INDEX  VARCHAR(255) ,
  SAML2_AUTHN_CONTEXT_CLASS_REF  VARCHAR(255) ,
  SAML2_ASSERTION  VARCHAR(4096) ,
  PRIMARY KEY (ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_SAML2_ARTIFACT_STORE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_SAML2_ARTIFACT_STORE (
  ID INTEGER IDENTITY NOT NULL,
  SOURCE_ID VARCHAR(255) NOT NULL,
  MESSAGE_HANDLER VARCHAR(255) NOT NULL,
  AUTHN_REQ_DTO IMAGE NOT NULL, -- WAS: VARBINARY(MAX) NOT NULL,
  SESSION_ID VARCHAR(255) NOT NULL,
  INIT_TIMESTAMP DATETIME NOT NULL,
  EXP_TIMESTAMP DATETIME NOT NULL,
  ASSERTION_ID VARCHAR(255),
  PRIMARY KEY (ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OIDC_JTI') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OIDC_JTI  (
  JWT_ID VARCHAR(255) NOT NULL,
  EXP_TIME DATETIME NOT NULL,
  TIME_CREATED DATETIME NOT NULL,
  PRIMARY KEY (JWT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OIDC_PROPERTY') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OIDC_PROPERTY (
  ID INTEGER IDENTITY NOT NULL,
  TENANT_ID  INTEGER ,
  CONSUMER_KEY  VARCHAR(255) ,
  PROPERTY_KEY  VARCHAR(255) NOT NULL ,
  PROPERTY_VALUE  VARCHAR(2047) ,
  PRIMARY KEY (ID)
  --FOREIGN KEY (CONSUMER_KEY) REFERENCES IDN_OAUTH_CONSUMER_APPS(CONSUMER_KEY) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJECT_REFERENCE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OIDC_REQ_OBJECT_REFERENCE (
  ID INTEGER IDENTITY NOT NULL,
  CONSUMER_KEY_ID INTEGER ,
  CODE_ID VARCHAR(255) ,
  TOKEN_ID VARCHAR(255) ,
  SESSION_DATA_KEY VARCHAR(255),
  PRIMARY KEY (ID),
  --FOREIGN KEY (CONSUMER_KEY_ID) REFERENCES IDN_OAUTH_CONSUMER_APPS(ID) ON DELETE CASCADE
  FOREIGN KEY (TOKEN_ID) REFERENCES IDN_OAUTH2_ACCESS_TOKEN(TOKEN_ID),
  FOREIGN KEY (CODE_ID) REFERENCES IDN_OAUTH2_AUTHORIZATION_CODE(CODE_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJECT_CLAIMS') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OIDC_REQ_OBJECT_CLAIMS (
  ID INTEGER IDENTITY NOT NULL,
  REQ_OBJECT_ID INTEGER,
  CLAIM_ATTRIBUTE VARCHAR(255) ,
  ESSENTIAL CHAR(1) DEFAULT '0'  NOT NULL,
  VALUE VARCHAR(255) ,
  IS_USERINFO CHAR(1) DEFAULT '0' NOT NULL,
  PRIMARY KEY (ID)
  --FOREIGN KEY (REQ_OBJECT_ID) REFERENCES IDN_OIDC_REQ_OBJECT_REFERENCE (ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJ_CLAIM_VALUES') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OIDC_REQ_OBJ_CLAIM_VALUES (
  ID INTEGER IDENTITY NOT NULL,
  REQ_OBJECT_CLAIMS_ID INTEGER ,
  CLAIM_VALUES VARCHAR(255) ,
  PRIMARY KEY (ID)
  --FOREIGN KEY (REQ_OBJECT_CLAIMS_ID) REFERENCES  IDN_OIDC_REQ_OBJECT_CLAIMS(ID) ON DELETE CASCADE
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_CERTIFICATE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_CERTIFICATE (
	ID INTEGER IDENTITY,
	NAME VARCHAR(100),
	CERTIFICATE_IN_PEM IMAGE, -- WAS: VARBINARY(MAX),
	TENANT_ID INTEGER DEFAULT 0,
	PRIMARY KEY(ID),
	CONSTRAINT CERTIFICATE_UNIQUE_KEY UNIQUE (NAME, TENANT_ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OIDC_SCOPE') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OIDC_SCOPE  (
  ID INTEGER IDENTITY,
  NAME VARCHAR(255),
  TENANT_ID INTEGER DEFAULT -1,
  PRIMARY KEY (ID)
)")
;

IF NOT  EXISTS (SELECT * FROM sysobjects WHERE id = object_id('IDN_OIDC_SCOPE_CLAIM_MAPPING') AND type = 'U')
EXECUTE("CREATE TABLE IDN_OIDC_SCOPE_CLAIM_MAPPING (
  ID INTEGER IDENTITY,
  SCOPE_ID INTEGER ,
  EXTERNAL_CLAIM_ID INTEGER ,
  PRIMARY KEY (ID)
  --FOREIGN KEY (SCOPE_ID) REFERENCES  IDN_OIDC_SCOPE(ID) ON DELETE CASCADE
  --FOREIGN KEY (EXTERNAL_CLAIM_ID) REFERENCES  IDN_CLAIM(ID) ON DELETE CASCADE
)")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'IDX_AT_SI_ECI')
	CREATE INDEX IDX_AT_SI_ECI ON IDN_OIDC_SCOPE_CLAIM_MAPPING(SCOPE_ID, EXTERNAL_CLAIM_ID)
;


--------------------------------------------------------------------------------
-- ASE doesn't support on delete cascade foreign key table constraints,
-- so we have to implement these using triggers instead.
--------------------------------------------------------------------------------
-- ASE ON DELETE CASCADE RI triggers
--------------------------------------------------------------------------------

-- create trigger IDN_OAUTH2_SCOPE_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_SCOPE_DEL_TR'))
DROP TRIGGER IDN_OAUTH2_SCOPE_DEL_TR
;
CREATE TRIGGER IDN_OAUTH2_SCOPE_DEL_TR ON IDN_OAUTH2_SCOPE
   FOR DELETE AS
DELETE IDN_OAUTH2_RESOURCE_SCOPE
  FROM deleted d, IDN_OAUTH2_RESOURCE_SCOPE r
 WHERE d.SCOPE_ID = r.SCOPE_ID
;

-- create trigger IDN_OAUTH2_ACCESS_TOKEN_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_ACCESS_TOKEN_DEL_TR'))
DROP TRIGGER IDN_OAUTH2_ACCESS_TOKEN_DEL_TR
;
CREATE TRIGGER IDN_OAUTH2_ACCESS_TOKEN_DEL_TR ON IDN_OAUTH2_ACCESS_TOKEN
   FOR DELETE AS
DELETE IDN_OAUTH2_ACCESS_TOKEN_SCOPE
  FROM deleted d, IDN_OAUTH2_ACCESS_TOKEN_SCOPE r
 WHERE d.TOKEN_ID = r.TOKEN_ID
;

-- create trigger IDN_CLAIM_DIALECT_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_CLAIM_DIALECT_DEL_TR'))
DROP TRIGGER IDN_CLAIM_DIALECT_DEL_TR
;
CREATE TRIGGER IDN_CLAIM_DIALECT_DEL_TR ON IDN_CLAIM_DIALECT
   FOR DELETE AS
DELETE IDN_CLAIM
  FROM deleted d, IDN_CLAIM r
 WHERE d.ID = r.DIALECT_ID
;

-- create trigger WF_REQUEST_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('WF_REQUEST_DEL_TR'))
DROP TRIGGER WF_REQUEST_DEL_TR
;
CREATE TRIGGER WF_REQUEST_DEL_TR ON WF_REQUEST
   FOR DELETE AS
DELETE WF_WORKFLOW_REQUEST_RELATION
  FROM deleted d, WF_WORKFLOW_REQUEST_RELATION r
 WHERE d.UUID = r.REQUEST_ID
;

-- create trigger IDN_OIDC_REQ_OBJECT_REFERENCE_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJECT_REFERENCE_DEL_TR'))
DROP TRIGGER IDN_OIDC_REQ_OBJECT_REFERENCE_DEL_TR
;
CREATE TRIGGER IDN_OIDC_REQ_OBJECT_REFERENCE_DEL_TR ON IDN_OIDC_REQ_OBJECT_REFERENCE
   FOR DELETE AS
DELETE IDN_OIDC_REQ_OBJECT_CLAIMS
  FROM deleted d, IDN_OIDC_REQ_OBJECT_CLAIMS r
 WHERE d.ID = r.REQ_OBJECT_ID
;

-- create trigger IDN_OIDC_SCOPE_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_SCOPE_DEL_TR'))
DROP TRIGGER IDN_OIDC_SCOPE_DEL_TR
;
CREATE TRIGGER IDN_OIDC_SCOPE_DEL_TR ON IDN_OIDC_SCOPE
   FOR DELETE AS
DELETE IDN_OIDC_SCOPE_CLAIM_MAPPING
  FROM deleted d, IDN_OIDC_SCOPE_CLAIM_MAPPING r
 WHERE d.ID = r.SCOPE_ID
;

-- create trigger IDP_PROVISIONING_CONFIG_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_PROVISIONING_CONFIG_DEL_TR'))
DROP TRIGGER IDP_PROVISIONING_CONFIG_DEL_TR
;
CREATE TRIGGER IDP_PROVISIONING_CONFIG_DEL_TR ON IDP_PROVISIONING_CONFIG
   FOR DELETE AS
DELETE IDP_PROVISIONING_ENTITY
  FROM deleted d, IDP_PROVISIONING_ENTITY r
 WHERE d.ID = r.PROVISIONING_CONFIG_ID
;

-- create trigger IDP_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_DEL_TR'))
DROP TRIGGER IDP_DEL_TR
;
CREATE TRIGGER IDP_DEL_TR ON IDP
   FOR DELETE AS
DELETE IDN_ASSOCIATED_ID
  FROM deleted d, IDN_ASSOCIATED_ID r
 WHERE d.ID = r.IDP_ID
;

-- create trigger IDN_CLAIM_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_CLAIM_DEL_TR'))
DROP TRIGGER IDN_CLAIM_DEL_TR
;
CREATE TRIGGER IDN_CLAIM_DEL_TR ON IDN_CLAIM
   FOR DELETE AS
DELETE IDN_OIDC_SCOPE_CLAIM_MAPPING
  FROM deleted d, IDN_OIDC_SCOPE_CLAIM_MAPPING r
 WHERE d.ID = r.EXTERNAL_CLAIM_ID
;

-- create trigger SP_AUTH_STEP_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_AUTH_STEP_DEL_TR'))
DROP TRIGGER SP_AUTH_STEP_DEL_TR
;
CREATE TRIGGER SP_AUTH_STEP_DEL_TR ON SP_AUTH_STEP
   FOR DELETE AS
DELETE SP_FEDERATED_IDP
  FROM deleted d, SP_FEDERATED_IDP r
 WHERE d.ID = r.ID
;

-- create trigger IDN_OAUTH_CONSUMER_APPS_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH_CONSUMER_APPS_DEL_TR'))
DROP TRIGGER IDN_OAUTH_CONSUMER_APPS_DEL_TR
;
CREATE TRIGGER IDN_OAUTH_CONSUMER_APPS_DEL_TR ON IDN_OAUTH_CONSUMER_APPS
   FOR DELETE AS
DELETE IDN_OAUTH2_ACCESS_TOKEN
  FROM deleted d, IDN_OAUTH2_ACCESS_TOKEN r
 WHERE d.ID = r.CONSUMER_KEY_ID
DELETE IDN_OAUTH2_AUTHORIZATION_CODE
  FROM deleted d, IDN_OAUTH2_AUTHORIZATION_CODE r
 WHERE d.ID = r.CONSUMER_KEY_ID
DELETE IDN_OIDC_PROPERTY
  FROM deleted d, IDN_OIDC_PROPERTY r
 WHERE d.CONSUMER_KEY = r.CONSUMER_KEY
DELETE IDN_OIDC_REQ_OBJECT_REFERENCE
  FROM deleted d, IDN_OIDC_REQ_OBJECT_REFERENCE r
 WHERE d.ID = r.CONSUMER_KEY_ID
DELETE IDN_OAUTH2_SCOPE_VALIDATORS
  FROM deleted d, IDN_OAUTH2_SCOPE_VALIDATORS r
 WHERE d.ID = r.APP_ID
DELETE IDN_OAUTH1A_REQUEST_TOKEN
  FROM deleted d, IDN_OAUTH1A_REQUEST_TOKEN r
 WHERE d.ID = r.CONSUMER_KEY_ID
DELETE IDN_OAUTH1A_ACCESS_TOKEN
  FROM deleted d, IDN_OAUTH1A_ACCESS_TOKEN r
 WHERE d.ID = r.CONSUMER_KEY_ID
;

-- create trigger IDN_OIDC_REQ_OBJECT_CLAIMS_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJECT_CLAIMS_DEL_TR'))
DROP TRIGGER IDN_OIDC_REQ_OBJECT_CLAIMS_DEL_TR
;
CREATE TRIGGER IDN_OIDC_REQ_OBJECT_CLAIMS_DEL_TR ON IDN_OIDC_REQ_OBJECT_CLAIMS
   FOR DELETE AS
DELETE IDN_OIDC_REQ_OBJ_CLAIM_VALUES
  FROM deleted d, IDN_OIDC_REQ_OBJ_CLAIM_VALUES r
 WHERE d.ID = r.REQ_OBJECT_CLAIMS_ID
;

-- create trigger WF_WORKFLOW_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('WF_WORKFLOW_DEL_TR'))
DROP TRIGGER WF_WORKFLOW_DEL_TR
;
CREATE TRIGGER WF_WORKFLOW_DEL_TR ON WF_WORKFLOW
   FOR DELETE AS
DELETE WF_WORKFLOW_REQUEST_RELATION
  FROM deleted d, WF_WORKFLOW_REQUEST_RELATION r
 WHERE d.ID = r.WORKFLOW_ID
;

-- create trigger IDP_AUTHENTICATOR_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_AUTHENTICATOR_DEL_TR'))
DROP TRIGGER IDP_AUTHENTICATOR_DEL_TR
;
CREATE TRIGGER IDP_AUTHENTICATOR_DEL_TR ON IDP_AUTHENTICATOR
   FOR DELETE AS
DELETE IDP_AUTHENTICATOR_PROPERTY
  FROM deleted d, IDP_AUTHENTICATOR_PROPERTY r
 WHERE d.ID = r.AUTHENTICATOR_ID
;

-- create trigger IDP_CLAIM_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_CLAIM_DEL_TR'))
DROP TRIGGER IDP_CLAIM_DEL_TR
;
CREATE TRIGGER IDP_CLAIM_DEL_TR ON IDP_CLAIM
   FOR DELETE AS
DELETE IDP_CLAIM_MAPPING
  FROM deleted d, IDP_CLAIM_MAPPING r
 WHERE d.ID = r.IDP_CLAIM_ID
;

-- create trigger IDP_ROLE_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_ROLE_DEL_TR'))
DROP TRIGGER IDP_ROLE_DEL_TR
;
CREATE TRIGGER IDP_ROLE_DEL_TR ON IDP_ROLE
   FOR DELETE AS
DELETE IDP_ROLE_MAPPING
  FROM deleted d, IDP_ROLE_MAPPING r
 WHERE d.ID = r.IDP_ROLE_ID
;

-- create trigger SP_APP_DEL_TR to handle RI cascade deletion
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_APP_DEL_TR'))
DROP TRIGGER SP_APP_DEL_TR
;
CREATE TRIGGER SP_APP_DEL_TR ON SP_APP
   FOR DELETE AS
DELETE SP_PROVISIONING_CONNECTOR
  FROM deleted d, SP_PROVISIONING_CONNECTOR r
 WHERE d.ID = r.APP_ID
;

--------------------------------------------------------------------------------
-- ASE foreign key RI constraint triggers for ON DELETE CASCADE
--------------------------------------------------------------------------------

-- create trigger IDP_CLAIM_MAPPING_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_CLAIM_MAPPING_TR'))
DROP TRIGGER IDP_CLAIM_MAPPING_TR
;
CREATE TRIGGER IDP_CLAIM_MAPPING_TR ON IDP_CLAIM_MAPPING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP_CLAIM'
IF ( SELECT COUNT(*) FROM IDP_CLAIM r, inserted i
      WHERE r.ID = i.IDP_CLAIM_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_ROLE_MAPPING_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_ROLE_MAPPING_TR'))
DROP TRIGGER IDP_ROLE_MAPPING_TR
;
CREATE TRIGGER IDP_ROLE_MAPPING_TR ON IDP_ROLE_MAPPING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP_ROLE'
IF ( SELECT COUNT(*) FROM IDP_ROLE r, inserted i
      WHERE r.ID = i.IDP_ROLE_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OIDC_REQ_OBJECT_REFERENCE_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJECT_REFERENCE_TR'))
DROP TRIGGER IDN_OIDC_REQ_OBJECT_REFERENCE_TR
;
CREATE TRIGGER IDN_OIDC_REQ_OBJECT_REFERENCE_TR ON IDN_OIDC_REQ_OBJECT_REFERENCE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH_CONSUMER_APPS'
IF ( SELECT COUNT(*) FROM IDN_OAUTH_CONSUMER_APPS r, inserted i
      WHERE r.ID = i.CONSUMER_KEY_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OIDC_REQ_OBJECT_CLAIMS_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJECT_CLAIMS_TR'))
DROP TRIGGER IDN_OIDC_REQ_OBJECT_CLAIMS_TR
;
CREATE TRIGGER IDN_OIDC_REQ_OBJECT_CLAIMS_TR ON IDN_OIDC_REQ_OBJECT_CLAIMS
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OIDC_REQ_OBJECT_REFERENCE'
IF ( SELECT COUNT(*) FROM IDN_OIDC_REQ_OBJECT_REFERENCE r, inserted i
      WHERE r.ID = i.REQ_OBJECT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OIDC_REQ_OBJ_CLAIM_VALUES_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_REQ_OBJ_CLAIM_VALUES_TR'))
DROP TRIGGER IDN_OIDC_REQ_OBJ_CLAIM_VALUES_TR
;
CREATE TRIGGER IDN_OIDC_REQ_OBJ_CLAIM_VALUES_TR ON IDN_OIDC_REQ_OBJ_CLAIM_VALUES
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OIDC_REQ_OBJECT_CLAIMS'
IF ( SELECT COUNT(*) FROM IDN_OIDC_REQ_OBJECT_CLAIMS r, inserted i
      WHERE r.ID = i.REQ_OBJECT_CLAIMS_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_AUTHENTICATOR_PROPERTY_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_AUTHENTICATOR_PROPERTY_TR'))
DROP TRIGGER IDP_AUTHENTICATOR_PROPERTY_TR
;
CREATE TRIGGER IDP_AUTHENTICATOR_PROPERTY_TR ON IDP_AUTHENTICATOR_PROPERTY
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP_AUTHENTICATOR'
IF ( SELECT COUNT(*) FROM IDP_AUTHENTICATOR r, inserted i
      WHERE r.ID = i.AUTHENTICATOR_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OIDC_PROPERTY_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_PROPERTY_TR'))
DROP TRIGGER IDN_OIDC_PROPERTY_TR
;
CREATE TRIGGER IDN_OIDC_PROPERTY_TR ON IDN_OIDC_PROPERTY
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH_CONSUMER_APPS'
IF ( SELECT COUNT(*) FROM IDN_OAUTH_CONSUMER_APPS r, inserted i
      WHERE r.CONSUMER_KEY = i.CONSUMER_KEY ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_ASSOCIATED_ID_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_ASSOCIATED_ID_TR'))
DROP TRIGGER IDN_ASSOCIATED_ID_TR
;
CREATE TRIGGER IDN_ASSOCIATED_ID_TR ON IDN_ASSOCIATED_ID
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP'
IF ( SELECT COUNT(*) FROM IDP r, inserted i
      WHERE r.ID = i.IDP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH2_AUTHORIZATION_CODE_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_AUTHORIZATION_CODE_TR'))
DROP TRIGGER IDN_OAUTH2_AUTHORIZATION_CODE_TR
;
CREATE TRIGGER IDN_OAUTH2_AUTHORIZATION_CODE_TR ON IDN_OAUTH2_AUTHORIZATION_CODE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH_CONSUMER_APPS'
IF ( SELECT COUNT(*) FROM IDN_OAUTH_CONSUMER_APPS r, inserted i
      WHERE r.ID = i.CONSUMER_KEY_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH1A_ACCESS_TOKEN_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH1A_ACCESS_TOKEN_TR'))
DROP TRIGGER IDN_OAUTH1A_ACCESS_TOKEN_TR
;
CREATE TRIGGER IDN_OAUTH1A_ACCESS_TOKEN_TR ON IDN_OAUTH1A_ACCESS_TOKEN
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH_CONSUMER_APPS'
IF ( SELECT COUNT(*) FROM IDN_OAUTH_CONSUMER_APPS r, inserted i
      WHERE r.ID = i.CONSUMER_KEY_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_CLAIM_MAPPED_ATTRIBUTE_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_CLAIM_MAPPED_ATTRIBUTE_TR'))
DROP TRIGGER IDN_CLAIM_MAPPED_ATTRIBUTE_TR
;
CREATE TRIGGER IDN_CLAIM_MAPPED_ATTRIBUTE_TR ON IDN_CLAIM_MAPPED_ATTRIBUTE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_CLAIM'
IF ( SELECT COUNT(*) FROM IDN_CLAIM r, inserted i
      WHERE r.ID = i.LOCAL_CLAIM_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_PROVISIONING_CONNECTOR_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_PROVISIONING_CONNECTOR_TR'))
DROP TRIGGER SP_PROVISIONING_CONNECTOR_TR
;
CREATE TRIGGER SP_PROVISIONING_CONNECTOR_TR ON SP_PROVISIONING_CONNECTOR
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH2_SCOPE_BINDING_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_SCOPE_BINDING_TR'))
DROP TRIGGER IDN_OAUTH2_SCOPE_BINDING_TR
;
CREATE TRIGGER IDN_OAUTH2_SCOPE_BINDING_TR ON IDN_OAUTH2_SCOPE_BINDING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH2_SCOPE'
IF ( SELECT COUNT(*) FROM IDN_OAUTH2_SCOPE r, inserted i
      WHERE r.SCOPE_ID = i.SCOPE_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_AUTHENTICATOR_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_AUTHENTICATOR_TR'))
DROP TRIGGER IDP_AUTHENTICATOR_TR
;
CREATE TRIGGER IDP_AUTHENTICATOR_TR ON IDP_AUTHENTICATOR
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP'
IF ( SELECT COUNT(*) FROM IDP r, inserted i
      WHERE r.ID = i.IDP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_CLAIM_MAPPING_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_CLAIM_MAPPING_TR'))
DROP TRIGGER SP_CLAIM_MAPPING_TR
;
CREATE TRIGGER SP_CLAIM_MAPPING_TR ON SP_CLAIM_MAPPING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger WF_WORKFLOW_REQUEST_RELATION_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('WF_WORKFLOW_REQUEST_RELATION_TR'))
DROP TRIGGER WF_WORKFLOW_REQUEST_RELATION_TR
;
CREATE TRIGGER WF_WORKFLOW_REQUEST_RELATION_TR ON WF_WORKFLOW_REQUEST_RELATION
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'WF_WORKFLOW'
IF ( SELECT COUNT(*) FROM WF_WORKFLOW r, inserted i
      WHERE r.ID = i.WORKFLOW_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
SET @FOREIGN_TABLE_NAME = 'WF_REQUEST'
IF ( SELECT COUNT(*) FROM WF_REQUEST r, inserted i
      WHERE r.UUID = i.REQUEST_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH2_ACCESS_TOKEN_SCOPE_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_ACCESS_TOKEN_SCOPE_TR'))
DROP TRIGGER IDN_OAUTH2_ACCESS_TOKEN_SCOPE_TR
;
CREATE TRIGGER IDN_OAUTH2_ACCESS_TOKEN_SCOPE_TR ON IDN_OAUTH2_ACCESS_TOKEN_SCOPE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH2_ACCESS_TOKEN'
IF ( SELECT COUNT(*) FROM IDN_OAUTH2_ACCESS_TOKEN r, inserted i
      WHERE r.TOKEN_ID = i.TOKEN_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_CLAIM_DIALECT_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_CLAIM_DIALECT_TR'))
DROP TRIGGER SP_CLAIM_DIALECT_TR
;
CREATE TRIGGER SP_CLAIM_DIALECT_TR ON SP_CLAIM_DIALECT
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH2_ACCESS_TOKEN_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_ACCESS_TOKEN_TR'))
DROP TRIGGER IDN_OAUTH2_ACCESS_TOKEN_TR
;
CREATE TRIGGER IDN_OAUTH2_ACCESS_TOKEN_TR ON IDN_OAUTH2_ACCESS_TOKEN
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH_CONSUMER_APPS'
IF ( SELECT COUNT(*) FROM IDN_OAUTH_CONSUMER_APPS r, inserted i
      WHERE r.ID = i.CONSUMER_KEY_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger WF_WORKFLOW_ASSOCIATION_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('WF_WORKFLOW_ASSOCIATION_TR'))
DROP TRIGGER WF_WORKFLOW_ASSOCIATION_TR
;
CREATE TRIGGER WF_WORKFLOW_ASSOCIATION_TR ON WF_WORKFLOW_ASSOCIATION
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'WF_WORKFLOW'
IF ( SELECT COUNT(*) FROM WF_WORKFLOW r, inserted i
      WHERE r.ID = i.WORKFLOW_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OIDC_SCOPE_CLAIM_MAPPING_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OIDC_SCOPE_CLAIM_MAPPING_TR'))
DROP TRIGGER IDN_OIDC_SCOPE_CLAIM_MAPPING_TR
;
CREATE TRIGGER IDN_OIDC_SCOPE_CLAIM_MAPPING_TR ON IDN_OIDC_SCOPE_CLAIM_MAPPING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OIDC_SCOPE'
IF ( SELECT COUNT(*) FROM IDN_OIDC_SCOPE r, inserted i
      WHERE r.ID = i.SCOPE_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
SET @FOREIGN_TABLE_NAME = 'IDN_CLAIM'
IF ( SELECT COUNT(*) FROM IDN_CLAIM r, inserted i
      WHERE r.ID = i.EXTERNAL_CLAIM_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH2_SCOPE_VALIDATORS_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_SCOPE_VALIDATORS_TR'))
DROP TRIGGER IDN_OAUTH2_SCOPE_VALIDATORS_TR
;
CREATE TRIGGER IDN_OAUTH2_SCOPE_VALIDATORS_TR ON IDN_OAUTH2_SCOPE_VALIDATORS
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH_CONSUMER_APPS'
IF ( SELECT COUNT(*) FROM IDN_OAUTH_CONSUMER_APPS r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_ROLE_MAPPING_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_ROLE_MAPPING_TR'))
DROP TRIGGER SP_ROLE_MAPPING_TR
;
CREATE TRIGGER SP_ROLE_MAPPING_TR ON SP_ROLE_MAPPING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_METADATA_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_METADATA_TR'))
DROP TRIGGER IDP_METADATA_TR
;
CREATE TRIGGER IDP_METADATA_TR ON IDP_METADATA
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP'
IF ( SELECT COUNT(*) FROM IDP r, inserted i
      WHERE r.ID = i.IDP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_AUTH_STEP_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_AUTH_STEP_TR'))
DROP TRIGGER SP_AUTH_STEP_TR
;
CREATE TRIGGER SP_AUTH_STEP_TR ON SP_AUTH_STEP
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_PROVISIONING_CONFIG_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_PROVISIONING_CONFIG_TR'))
DROP TRIGGER IDP_PROVISIONING_CONFIG_TR
;
CREATE TRIGGER IDP_PROVISIONING_CONFIG_TR ON IDP_PROVISIONING_CONFIG
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP'
IF ( SELECT COUNT(*) FROM IDP r, inserted i
      WHERE r.ID = i.IDP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_INBOUND_AUTH_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_INBOUND_AUTH_TR'))
DROP TRIGGER SP_INBOUND_AUTH_TR
;
CREATE TRIGGER SP_INBOUND_AUTH_TR ON SP_INBOUND_AUTH
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger WF_REQUEST_ENTITY_RELATIONSHIP_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('WF_REQUEST_ENTITY_RELATIONSHIP_TR'))
DROP TRIGGER WF_REQUEST_ENTITY_RELATIONSHIP_TR
;
CREATE TRIGGER WF_REQUEST_ENTITY_RELATIONSHIP_TR ON WF_REQUEST_ENTITY_RELATIONSHIP
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'WF_REQUEST'
IF ( SELECT COUNT(*) FROM WF_REQUEST r, inserted i
      WHERE r.UUID = i.REQUEST_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH1A_REQUEST_TOKEN_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH1A_REQUEST_TOKEN_TR'))
DROP TRIGGER IDN_OAUTH1A_REQUEST_TOKEN_TR
;
CREATE TRIGGER IDN_OAUTH1A_REQUEST_TOKEN_TR ON IDN_OAUTH1A_REQUEST_TOKEN
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH_CONSUMER_APPS'
IF ( SELECT COUNT(*) FROM IDN_OAUTH_CONSUMER_APPS r, inserted i
      WHERE r.ID = i.CONSUMER_KEY_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_METADATA_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_METADATA_TR'))
DROP TRIGGER SP_METADATA_TR
;
CREATE TRIGGER SP_METADATA_TR ON SP_METADATA
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.SP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger WF_WORKFLOW_CONFIG_PARAM_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('WF_WORKFLOW_CONFIG_PARAM_TR'))
DROP TRIGGER WF_WORKFLOW_CONFIG_PARAM_TR
;
CREATE TRIGGER WF_WORKFLOW_CONFIG_PARAM_TR ON WF_WORKFLOW_CONFIG_PARAM
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'WF_WORKFLOW'
IF ( SELECT COUNT(*) FROM WF_WORKFLOW r, inserted i
      WHERE r.ID = i.WORKFLOW_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_LOCAL_CLAIM_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_LOCAL_CLAIM_TR'))
DROP TRIGGER IDP_LOCAL_CLAIM_TR
;
CREATE TRIGGER IDP_LOCAL_CLAIM_TR ON IDP_LOCAL_CLAIM
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP'
IF ( SELECT COUNT(*) FROM IDP r, inserted i
      WHERE r.ID = i.IDP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_FEDERATED_IDP_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_FEDERATED_IDP_TR'))
DROP TRIGGER SP_FEDERATED_IDP_TR
;
CREATE TRIGGER SP_FEDERATED_IDP_TR ON SP_FEDERATED_IDP
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_AUTH_STEP'
IF ( SELECT COUNT(*) FROM SP_AUTH_STEP r, inserted i
      WHERE r.ID = i.ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_ROLE_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_ROLE_TR'))
DROP TRIGGER IDP_ROLE_TR
;
CREATE TRIGGER IDP_ROLE_TR ON IDP_ROLE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP'
IF ( SELECT COUNT(*) FROM IDP r, inserted i
      WHERE r.ID = i.IDP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_CLAIM_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_CLAIM_TR'))
DROP TRIGGER IDP_CLAIM_TR
;
CREATE TRIGGER IDP_CLAIM_TR ON IDP_CLAIM
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP'
IF ( SELECT COUNT(*) FROM IDP r, inserted i
      WHERE r.ID = i.IDP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_OAUTH2_RESOURCE_SCOPE_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_OAUTH2_RESOURCE_SCOPE_TR'))
DROP TRIGGER IDN_OAUTH2_RESOURCE_SCOPE_TR
;
CREATE TRIGGER IDN_OAUTH2_RESOURCE_SCOPE_TR ON IDN_OAUTH2_RESOURCE_SCOPE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_OAUTH2_SCOPE'
IF ( SELECT COUNT(*) FROM IDN_OAUTH2_SCOPE r, inserted i
      WHERE r.SCOPE_ID = i.SCOPE_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_PROV_CONFIG_PROPERTY_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_PROV_CONFIG_PROPERTY_TR'))
DROP TRIGGER IDP_PROV_CONFIG_PROPERTY_TR
;
CREATE TRIGGER IDP_PROV_CONFIG_PROPERTY_TR ON IDP_PROV_CONFIG_PROPERTY
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP_PROVISIONING_CONFIG'
IF ( SELECT COUNT(*) FROM IDP_PROVISIONING_CONFIG r, inserted i
      WHERE r.ID = i.PROVISIONING_CONFIG_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_CLAIM_MAPPING_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_CLAIM_MAPPING_TR'))
DROP TRIGGER IDN_CLAIM_MAPPING_TR
;
CREATE TRIGGER IDN_CLAIM_MAPPING_TR ON IDN_CLAIM_MAPPING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_CLAIM'
IF ( SELECT COUNT(*) FROM IDN_CLAIM r, inserted i
      WHERE r.ID = i.EXT_CLAIM_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_CLAIM_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_CLAIM_TR'))
DROP TRIGGER IDN_CLAIM_TR
;
CREATE TRIGGER IDN_CLAIM_TR ON IDN_CLAIM
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_CLAIM_DIALECT'
IF ( SELECT COUNT(*) FROM IDN_CLAIM_DIALECT r, inserted i
      WHERE r.ID = i.DIALECT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDP_PROVISIONING_ENTITY_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDP_PROVISIONING_ENTITY_TR'))
DROP TRIGGER IDP_PROVISIONING_ENTITY_TR
;
CREATE TRIGGER IDP_PROVISIONING_ENTITY_TR ON IDP_PROVISIONING_ENTITY
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDP_PROVISIONING_CONFIG'
IF ( SELECT COUNT(*) FROM IDP_PROVISIONING_CONFIG r, inserted i
      WHERE r.ID = i.PROVISIONING_CONFIG_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger IDN_CLAIM_PROPERTY_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('IDN_CLAIM_PROPERTY_TR'))
DROP TRIGGER IDN_CLAIM_PROPERTY_TR
;
CREATE TRIGGER IDN_CLAIM_PROPERTY_TR ON IDN_CLAIM_PROPERTY
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'IDN_CLAIM'
IF ( SELECT COUNT(*) FROM IDN_CLAIM r, inserted i
      WHERE r.ID = i.LOCAL_CLAIM_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

-- create trigger SP_REQ_PATH_AUTHENTICATOR_TR to handle foreign key RI constraint for delete cascade support
IF EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('SP_REQ_PATH_AUTHENTICATOR_TR'))
DROP TRIGGER SP_REQ_PATH_AUTHENTICATOR_TR
;
CREATE TRIGGER SP_REQ_PATH_AUTHENTICATOR_TR ON SP_REQ_PATH_AUTHENTICATOR
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'IDN_OIDC_SCOPE_CLAIM_MAPPING'
SET @FOREIGN_TABLE_NAME = 'SP_APP'
IF ( SELECT COUNT(*) FROM SP_APP r, inserted i
      WHERE r.ID = i.APP_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  "Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
;

